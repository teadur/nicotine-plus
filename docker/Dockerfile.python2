# patches the original (Python2) nicotine to print debugging messages
#
# Usage examples:
# docker build -t nicotine -f docker/Dockerfile.python2 .
# docker run --net=host --env="DISPLAY" --volume="$HOME/.Xauthority:/root/.Xauthority:rw" -t nicotine
# docker exec -it <ID> ptpython
# docker exec -it -e DISPLAY=$DISPLAY <ID> xfce4-terminal

FROM ubuntu:18.04

RUN apt-get update
RUN apt-get install -y software-properties-common apt-utils
RUN add-apt-repository -y ppa:nicotine-team/stable
RUN apt-get install -y nicotine xfce4-terminal less

COPY docker/config /root/.nicotine

ENV slskproto="/usr/lib/python2.7/dist-packages/pynicotine/slskproto.py"
# run()
RUN sed -i '/if connection in conns and len(conns\[connection\].ibuf) > 0:/a\\
\t\t\t\t\tprint "********    ibuf: ", conns[connection].ibuf' $slskproto
RUN sed -i '/self.process_server_input(conns\[server_socket\].ibuf)/a\\
\t\t\t\t\t\tprint "* 526", [msg.__class__.__name__ for msg in msgs]' $slskproto
RUN sed -i '/self.process_peer_input(conns\[connection\], conns\[connection\].ibuf)/a\\
\t\t\t\t\t\t\tprint "* 531", [msg.__class__.__name__ for msg in msgs]' $slskproto
RUN sed -i '/self.process_file_input(conns\[connection\], conns\[connection\].ibuf)/a\\
\t\t\t\t\t\t\tprint "* 535", [msg.__class__.__name__ for msg in msgs]' $slskproto
RUN sed -i '/self.process_distrib_input(conns\[connection\], conns\[connection\].ibuf)/a\\
\t\t\t\t\t\t\tprint "* 539", [msg.__class__.__name__ for msg in msgs]' $slskproto
# writeData()
RUN sed -i '/def writeData(self, server_socket, conns, i):/a\\
\t\tprint "********writing", conns[i].obuf' $slskproto
RUN sed -i '/bytes_send = i.send(conns\[i\].obuf\[:limit\])/a\\
\t\tprint "bytes sent:", bytes_send' $slskproto

# readData()
RUN sed -i '/data = i.recv(conns\[i\].lastreadlength)/a\\
\t\t\tprint "********readData {}".format(data[:200])' $slskproto

# process_queue()
RUN sed -i '/msgList.append(queue.get())/a\\
\t\tprint "********queue:", msgList' $slskproto
RUN sed -i '/\t\t\t\t\tif server_socket in conns:/a\\
\t\t\t\t\t\tprint "********      msg:", msg[:200]' $slskproto
RUN less $slskproto

ENV pynicotine="/usr/lib/python2.7/dist-packages/pynicotine/pynicotine.py"
#RUN sed -i '/def FileSearchResult(self, msg):/a\\
#        traceback.print_stack()' $pynicotine
RUN sed -i '/def FileSearchResult(self, msg):/a\\
        import traceback' $pynicotine
RUN sed -i '/def ConnectToPeer(self, msg):/a\\
        print "ConnectToPeer", msg' $pynicotine
RUN sed -i '/self.logMessage("%s %s" % (msg.__class__, vars(msg)), 3)/a\\
        print "    peerconns", self.peerconns' $pynicotine

ENV frame="/usr/lib/python2.7/dist-packages/pynicotine/gtkgui/frame.py"
#RUN sed -i '/def emit_network_event(self, msgs):/a\\
#        print "emit_network_event", [msg.__class__.__name__ for msg in msgs]' $frame
#RUN sed -i '/def networkcallback(self, msgs):/a\\
#        print "networkcallback", [msg.__class__.__name__ for msg in msgs]' $frame

ENV DISPLAY=:0
CMD nicotine || sleep 100000

